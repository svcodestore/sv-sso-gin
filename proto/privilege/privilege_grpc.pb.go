// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: privilege.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrivilegeClient is the client API for Privilege service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrivilegeClient interface {
	GetAccessibleApplicationsByUserId(ctx context.Context, in *GetAccessibleApplicationsByUserIdRequest, opts ...grpc.CallOption) (*GetAccessibleApplicationsByUserIdReply, error)
}

type privilegeClient struct {
	cc grpc.ClientConnInterface
}

func NewPrivilegeClient(cc grpc.ClientConnInterface) PrivilegeClient {
	return &privilegeClient{cc}
}

func (c *privilegeClient) GetAccessibleApplicationsByUserId(ctx context.Context, in *GetAccessibleApplicationsByUserIdRequest, opts ...grpc.CallOption) (*GetAccessibleApplicationsByUserIdReply, error) {
	out := new(GetAccessibleApplicationsByUserIdReply)
	err := c.cc.Invoke(ctx, "/privilege.Privilege/GetAccessibleApplicationsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivilegeServer is the server API for Privilege service.
// All implementations must embed UnimplementedPrivilegeServer
// for forward compatibility
type PrivilegeServer interface {
	GetAccessibleApplicationsByUserId(context.Context, *GetAccessibleApplicationsByUserIdRequest) (*GetAccessibleApplicationsByUserIdReply, error)
	mustEmbedUnimplementedPrivilegeServer()
}

// UnimplementedPrivilegeServer must be embedded to have forward compatible implementations.
type UnimplementedPrivilegeServer struct {
}

func (UnimplementedPrivilegeServer) GetAccessibleApplicationsByUserId(context.Context, *GetAccessibleApplicationsByUserIdRequest) (*GetAccessibleApplicationsByUserIdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessibleApplicationsByUserId not implemented")
}
func (UnimplementedPrivilegeServer) mustEmbedUnimplementedPrivilegeServer() {}

// UnsafePrivilegeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrivilegeServer will
// result in compilation errors.
type UnsafePrivilegeServer interface {
	mustEmbedUnimplementedPrivilegeServer()
}

func RegisterPrivilegeServer(s grpc.ServiceRegistrar, srv PrivilegeServer) {
	s.RegisterService(&Privilege_ServiceDesc, srv)
}

func _Privilege_GetAccessibleApplicationsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessibleApplicationsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivilegeServer).GetAccessibleApplicationsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privilege.Privilege/GetAccessibleApplicationsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivilegeServer).GetAccessibleApplicationsByUserId(ctx, req.(*GetAccessibleApplicationsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Privilege_ServiceDesc is the grpc.ServiceDesc for Privilege service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Privilege_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "privilege.Privilege",
	HandlerType: (*PrivilegeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccessibleApplicationsByUserId",
			Handler:    _Privilege_GetAccessibleApplicationsByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "privilege.proto",
}
